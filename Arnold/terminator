#!/usr/bin/env python
#
#    Terminator - multiple gnome terminals in one window
#    Copyright (C) 2006-2010  cmsj@tenshu.net
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, version 2 only.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
#    USA

"""Terminator by Chris Jones <cmsj@tenshu.net>"""

import sys
import os

try:
    ORIGCWD = os.getcwd()
except OSError:
    ORIGCWD = os.path.expanduser("~")

# Check we have simple basics like Gtk+ and a valid $DISPLAY
try:
    import gi
    gi.require_version('Gtk','3.0')
    # pylint: disable-msg=W0611
    from gi.repository import Gtk, Gdk, GLib

    if Gdk.Display.get_default() == None:
        print('You need to run terminator in an X environment. ' \
              'Make sure $DISPLAY is properly set')
        sys.exit(1)

except ImportError:
    print('You need to install the python bindings for ' \
           'gobject, gtk and pango to run Terminator.')
    sys.exit(1)

from terminatorlib.terminator import Terminator
from terminatorlib.factory import Factory
from terminatorlib.version import APP_NAME, APP_VERSION
from terminatorlib.util import dbg, err
from terminatorlib.layoutlauncher import LayoutLauncher
from terminatorlib.configjson import ConfigJson

if __name__ == '__main__':


    dbg ("%s starting up, version %s" % (APP_NAME, APP_VERSION))
  
    GLib.set_prgname(APP_NAME)
  
    TERMINATOR = Terminator()
    TERMINATOR.set_origcwd(ORIGCWD)

    if(True):
        print("asdfasddfs        asdfsadfasdf sf asdfasdfasdfsdf")
        MAKER = Factory()
        # TERMINATOR.set_dbus_data(dbus_service)
        TERMINATOR.reconfigure()
        TERMINATOR.new_window()
        TERMINATOR.layout_done()

        # import terminatorlib.debugserver as debugserver
        # import threading

        # Gdk.threads_init()
        # (DEBUGTHREAD, DEBUGSVR) = debugserver.spawn(locals())
        # TERMINATOR.debug_address = DEBUGSVR.server_address

    try:
        Gtk.main()
    except KeyboardInterrupt:
        pass

